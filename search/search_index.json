{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home \u00b6 oidc-server is a standalone Mock OIDC server built on top of https://github.com/oauth2-proxy/mockoidc . Features \u00b6 OIDC Authorization Code flow: from mockoidc Provider Discovery ( ./well-known/openid-configuration ): from mockoidc Token Signature validation (from jwk provider endpoint): from mockoidc Client Auth Method ( client_secret_post ): from mockoidc Refresh Token Flow: : from mockoidc Standalone Server: oidc-server start Custom Mock Users: inject arbitrary Claims in id_token and/or userinfo Docker container (TODO)","title":"Home"},{"location":"#home","text":"oidc-server is a standalone Mock OIDC server built on top of https://github.com/oauth2-proxy/mockoidc .","title":"Home"},{"location":"#features","text":"OIDC Authorization Code flow: from mockoidc Provider Discovery ( ./well-known/openid-configuration ): from mockoidc Token Signature validation (from jwk provider endpoint): from mockoidc Client Auth Method ( client_secret_post ): from mockoidc Refresh Token Flow: : from mockoidc Standalone Server: oidc-server start Custom Mock Users: inject arbitrary Claims in id_token and/or userinfo Docker container (TODO)","title":"Features"},{"location":"changelog/","text":"Changelog \u00b6 Check the generated CHANGELOG.md from the Github repo","title":"Changelog"},{"location":"changelog/#changelog","text":"Check the generated CHANGELOG.md from the Github repo","title":"Changelog"},{"location":"config/","text":"Server Configuration \u00b6 You can find a complete example of the client configuration in example/config.yaml . Client Authentication Settings \u00b6 Client ID and Secret \u00b6 Important Mandatory (either in config file or ENV variables) unless using pkce flow. In which case the client_secret is not required. See section PKCE . The OIDC client credentials can be passed either in the main config.yaml config file, or as environment variables. Config File \u00b6 ## Client Credentials: (Mandatory) ### NOTE: those client_id/client_secret can be passed ### as environment variables with: ### ### export OIDC_CLIENT_ID=my_client_id ### export OIDC_CLIENT_SECRET=my_client_id ### client_id : my_client_id client_secret : my_client_secret Env Variables \u00b6 export OIDC_CLIENT_ID = my_client_id export OIDC_CLIENT_SECRET = my_client_secret Client Authentication Method \u00b6 Important Only client_secret_post is currently supported, where ClientID/ClientSecret are passed in the POST body as application/x-www-form-urlencoded parameters. PKCE \u00b6 Info More information about pkce can be found https://www.oauth.com/oauth2-servers/pkce/ . Pkce Challenge Method \u00b6 Note Optional Settings ### Supported challenge method (Optional) ### ### Default: ### - S256 ### - plain ### # pkce_challenge_methods: # - plain # - S256 Scopes \u00b6 Note Optional Settings You can update the list of scopes requested using the supported_scopes setting: ## Supported Scropes (optional) ### List of supported scropes by the OIDC server ### Default to same default as https://github.com/oauth2-proxy/mockoidc # supported_scopes: # - openid # - profile # - roles Warning The oidc mock server will validate that the scopes requested are present in this list Authorization Server \u00b6 Issuer \u00b6 Note Optional Settings You can specify the issuer_base_url setting that will be used for construct the Issuer by adding the base path /oidc . ## Issuer Base Url (Optional) ### Set the base url for the OIDC server ### Issuer is generated using ### issuer_base_url + '/oidc' ### ### Default: http://127.0.0.1:5557 # issuer_base_url: http://oidc.example.com:8080 Tips Use this when the OIDC server is access via a reverse proxy/LB or when using port mapping (e.g. via docker) Discovery Endpoint (and well-known configuration) \u00b6 The discovery endpoint is build using the issuer_base_url (or the default http://127.0.0.1:5557 ) by adding the base path /oidc , so by default: discovery endpoint: http://127.0.0.1:5557/oidc/.well-known/openid-configuration authorization_endpoint: http://127.0.0.1:5557/oidc/authorize issuer: http://127.0.0.1:5557/oidc token_endpoint: http://127.0.0.1:5557/oidc/token userinfo_endpoint: http://127.0.0.1:5557/oidc/userinfo jwks_uri: http://127.0.0.1:5557/oidc/.well-known/jwks.json","title":"Server Configuration"},{"location":"config/#server-configuration","text":"You can find a complete example of the client configuration in example/config.yaml .","title":"Server Configuration"},{"location":"config/#client-authentication-settings","text":"","title":"Client Authentication Settings"},{"location":"config/#client-id-and-secret","text":"Important Mandatory (either in config file or ENV variables) unless using pkce flow. In which case the client_secret is not required. See section PKCE . The OIDC client credentials can be passed either in the main config.yaml config file, or as environment variables.","title":"Client ID and Secret"},{"location":"config/#config-file","text":"## Client Credentials: (Mandatory) ### NOTE: those client_id/client_secret can be passed ### as environment variables with: ### ### export OIDC_CLIENT_ID=my_client_id ### export OIDC_CLIENT_SECRET=my_client_id ### client_id : my_client_id client_secret : my_client_secret","title":"Config File"},{"location":"config/#env-variables","text":"export OIDC_CLIENT_ID = my_client_id export OIDC_CLIENT_SECRET = my_client_secret","title":"Env Variables"},{"location":"config/#client-authentication-method","text":"Important Only client_secret_post is currently supported, where ClientID/ClientSecret are passed in the POST body as application/x-www-form-urlencoded parameters.","title":"Client Authentication Method"},{"location":"config/#pkce","text":"Info More information about pkce can be found https://www.oauth.com/oauth2-servers/pkce/ .","title":"PKCE"},{"location":"config/#pkce-challenge-method","text":"Note Optional Settings ### Supported challenge method (Optional) ### ### Default: ### - S256 ### - plain ### # pkce_challenge_methods: # - plain # - S256","title":"Pkce Challenge Method"},{"location":"config/#scopes","text":"Note Optional Settings You can update the list of scopes requested using the supported_scopes setting: ## Supported Scropes (optional) ### List of supported scropes by the OIDC server ### Default to same default as https://github.com/oauth2-proxy/mockoidc # supported_scopes: # - openid # - profile # - roles Warning The oidc mock server will validate that the scopes requested are present in this list","title":"Scopes"},{"location":"config/#authorization-server","text":"","title":"Authorization Server"},{"location":"config/#issuer","text":"Note Optional Settings You can specify the issuer_base_url setting that will be used for construct the Issuer by adding the base path /oidc . ## Issuer Base Url (Optional) ### Set the base url for the OIDC server ### Issuer is generated using ### issuer_base_url + '/oidc' ### ### Default: http://127.0.0.1:5557 # issuer_base_url: http://oidc.example.com:8080 Tips Use this when the OIDC server is access via a reverse proxy/LB or when using port mapping (e.g. via docker)","title":"Issuer"},{"location":"config/#discovery-endpoint-and-well-known-configuration","text":"The discovery endpoint is build using the issuer_base_url (or the default http://127.0.0.1:5557 ) by adding the base path /oidc , so by default: discovery endpoint: http://127.0.0.1:5557/oidc/.well-known/openid-configuration authorization_endpoint: http://127.0.0.1:5557/oidc/authorize issuer: http://127.0.0.1:5557/oidc token_endpoint: http://127.0.0.1:5557/oidc/token userinfo_endpoint: http://127.0.0.1:5557/oidc/userinfo jwks_uri: http://127.0.0.1:5557/oidc/.well-known/jwks.json","title":"Discovery Endpoint (and well-known configuration)"},{"location":"install/","text":"Install \u00b6 You can find the pre-compiled binaries on the release page https://github.com/vdbulcke/oidc-server-demo/releases Getting Latest Version \u00b6 TAG = $( curl https://api.github.com/repos/vdbulcke/oidc-server-demo/releases/latest | jq .tag_name -r ) VERSION = $( echo $TAG | cut -d 'v' -f 2 ) Info You will need jq and curl in your PATH MacOS \u00b6 Intel ARM (M1) Universal Binary Download the binary from the releases page: curl -LO \"https://github.com/vdbulcke/oidc-server-demo/releases/download/ ${ TAG } /oidc-server-demo_ ${ VERSION } _Darwin_x86_64.tar.gz\" Extract Binary: tar xzf \"oidc-server-demo_ ${ VERSION } _Darwin_x86_64.tar.gz\" Check Version: ./oidc-server version Install in your PATH : sudo install oidc-server /usr/local/bin/ Or sudo mv oidc-server /usr/local/bin/ Download the binary from the releases page: curl -LO \"https://github.com/vdbulcke/oidc-server-demo/releases/download/ ${ TAG } /oidc-server-demo_ ${ VERSION } _Darwin_amr64.tar.gz\" Extract Binary: tar xzf \"oidc-server-demo_ ${ VERSION } _Darwin_amr64.tar.gz\" Check Version: ./oidc-server version Install in your PATH : sudo install oidc-server /usr/local/bin/ Or sudo mv oidc-server /usr/local/bin/ Download the binary from the releases page: curl -LO \"https://github.com/vdbulcke/oidc-server-demo/releases/download/ ${ TAG } /oidc-server-demo_ ${ VERSION } _Darwin_all.tar.gz\" Extract Binary: tar xzf \"oidc-server-demo_ ${ VERSION } _Darwin_all.tar.gz\" Check Version: ./oidc-server version Install in your PATH : sudo install oidc-server /usr/local/bin/ Or sudo mv oidc-server /usr/local/bin/ Linux \u00b6 Intel ARM Download the binary from the releases page: curl -LO \"https://github.com/vdbulcke/oidc-server-demo/releases/download/ ${ TAG } /oidc-server-demo_ ${ VERSION } _Linux_x86_64.tar.gz\" Extract Binary: tar xzf \"oidc-server-demo_ ${ VERSION } _Linux_x86_64.tar.gz\" Check Version: ./oidc-server version Install in your PATH : sudo install oidc-server /usr/local/bin/ Or sudo mv oidc-server /usr/local/bin/ Download the binary from the releases page: curl -LO \"https://github.com/vdbulcke/oidc-server-demo/releases/download/ ${ TAG } /oidc-server-demo_ ${ VERSION } _Linux_amr64.tar.gz\" Extract Binary: tar xzf \"oidc-server-demo_ ${ VERSION } _Linux_amr64.tar.gz\" Check Version: ./oidc-server version Install in your PATH : sudo install oidc-server /usr/local/bin/ Or sudo mv oidc-server /usr/local/bin/ Windows \u00b6 Intel Download the binary oidc-server-demo_[VERSION]_Windows_x86_64.zip from the releases page Unzip the Binary Check Version: ./oidc-server.exe version","title":"Install"},{"location":"install/#install","text":"You can find the pre-compiled binaries on the release page https://github.com/vdbulcke/oidc-server-demo/releases","title":"Install"},{"location":"install/#getting-latest-version","text":"TAG = $( curl https://api.github.com/repos/vdbulcke/oidc-server-demo/releases/latest | jq .tag_name -r ) VERSION = $( echo $TAG | cut -d 'v' -f 2 ) Info You will need jq and curl in your PATH","title":"Getting Latest Version"},{"location":"install/#macos","text":"Intel ARM (M1) Universal Binary Download the binary from the releases page: curl -LO \"https://github.com/vdbulcke/oidc-server-demo/releases/download/ ${ TAG } /oidc-server-demo_ ${ VERSION } _Darwin_x86_64.tar.gz\" Extract Binary: tar xzf \"oidc-server-demo_ ${ VERSION } _Darwin_x86_64.tar.gz\" Check Version: ./oidc-server version Install in your PATH : sudo install oidc-server /usr/local/bin/ Or sudo mv oidc-server /usr/local/bin/ Download the binary from the releases page: curl -LO \"https://github.com/vdbulcke/oidc-server-demo/releases/download/ ${ TAG } /oidc-server-demo_ ${ VERSION } _Darwin_amr64.tar.gz\" Extract Binary: tar xzf \"oidc-server-demo_ ${ VERSION } _Darwin_amr64.tar.gz\" Check Version: ./oidc-server version Install in your PATH : sudo install oidc-server /usr/local/bin/ Or sudo mv oidc-server /usr/local/bin/ Download the binary from the releases page: curl -LO \"https://github.com/vdbulcke/oidc-server-demo/releases/download/ ${ TAG } /oidc-server-demo_ ${ VERSION } _Darwin_all.tar.gz\" Extract Binary: tar xzf \"oidc-server-demo_ ${ VERSION } _Darwin_all.tar.gz\" Check Version: ./oidc-server version Install in your PATH : sudo install oidc-server /usr/local/bin/ Or sudo mv oidc-server /usr/local/bin/","title":"MacOS"},{"location":"install/#linux","text":"Intel ARM Download the binary from the releases page: curl -LO \"https://github.com/vdbulcke/oidc-server-demo/releases/download/ ${ TAG } /oidc-server-demo_ ${ VERSION } _Linux_x86_64.tar.gz\" Extract Binary: tar xzf \"oidc-server-demo_ ${ VERSION } _Linux_x86_64.tar.gz\" Check Version: ./oidc-server version Install in your PATH : sudo install oidc-server /usr/local/bin/ Or sudo mv oidc-server /usr/local/bin/ Download the binary from the releases page: curl -LO \"https://github.com/vdbulcke/oidc-server-demo/releases/download/ ${ TAG } /oidc-server-demo_ ${ VERSION } _Linux_amr64.tar.gz\" Extract Binary: tar xzf \"oidc-server-demo_ ${ VERSION } _Linux_amr64.tar.gz\" Check Version: ./oidc-server version Install in your PATH : sudo install oidc-server /usr/local/bin/ Or sudo mv oidc-server /usr/local/bin/","title":"Linux"},{"location":"install/#windows","text":"Intel Download the binary oidc-server-demo_[VERSION]_Windows_x86_64.zip from the releases page Unzip the Binary Check Version: ./oidc-server.exe version","title":"Windows"},{"location":"troubleshooting/","text":"Troubleshooting \u00b6 This page regroups some of the most common errors. Closing Local Server \u00b6 Use CTL+C to close the local http server {\"level\":\"info\",\"ts\":1647367899.411411,\"caller\":\"oidc-server/server.go:40\",\"msg\":\"starting server\"} {\"level\":\"info\",\"ts\":1647367899.4114451,\"caller\":\"oidc-server/server.go:41\",\"msg\":\"server config\",\"Issuer\":\"http://127.0.0.1:5557/oidc\"} ^C{\"level\":\"info\",\"ts\":1647367900.9016469,\"caller\":\"oidc-server/server.go:50\",\"msg\":\"Got signal\",\"sig\":\"interrupt\"} Configuration Validation Errors \u00b6 Missing Mandatory Settings \u00b6 example missing client_id: oidc-server start --config example/wrong.yaml Key: 'OIDCServerConfig.ClientID' Error:Field validation for 'ClientID' failed on the 'required' tag {\"level\":\"error\",\"ts\":1647367972.9460135,\"caller\":\"cmd/start.go:76\",\"msg\":\"validating config\",\"error\":\"Validation Error\",\"stacktrace\":\"github.com/vdbulcke/oidc-server-demo/cmd.runServer\\n\\t/home/runner/work/oidc-server-demo/oidc-server-demo/cmd/start.go:76\\ngithub.com/spf13/cobra.(*Command).execute\\n\\t/home/runner/go/pkg/mod/github.com/spf13/cobra@v1.4.0/command.go:860\\ngithub.com/spf13/cobra.(*Command).ExecuteC\\n\\t/home/runner/go/pkg/mod/github.com/spf13/cobra@v1.4.0/command.go:974\\ngithub.com/spf13/cobra.(*Command).Execute\\n\\t/home/runner/go/pkg/mod/github.com/spf13/cobra@v1.4.0/command.go:902\\ngithub.com/vdbulcke/oidc-server-demo/cmd.Execute\\n\\t/home/runner/work/oidc-server-demo/oidc-server-demo/cmd/main.go:36\\nmain.main\\n\\t/home/runner/work/oidc-server-demo/oidc-server-demo/main.go:8\\nruntime.main\\n\\t/opt/hostedtoolcache/go/1.17.7/x64/src/runtime/proc.go:255\"}","title":"Troubleshooting"},{"location":"troubleshooting/#troubleshooting","text":"This page regroups some of the most common errors.","title":"Troubleshooting"},{"location":"troubleshooting/#closing-local-server","text":"Use CTL+C to close the local http server {\"level\":\"info\",\"ts\":1647367899.411411,\"caller\":\"oidc-server/server.go:40\",\"msg\":\"starting server\"} {\"level\":\"info\",\"ts\":1647367899.4114451,\"caller\":\"oidc-server/server.go:41\",\"msg\":\"server config\",\"Issuer\":\"http://127.0.0.1:5557/oidc\"} ^C{\"level\":\"info\",\"ts\":1647367900.9016469,\"caller\":\"oidc-server/server.go:50\",\"msg\":\"Got signal\",\"sig\":\"interrupt\"}","title":"Closing Local Server"},{"location":"troubleshooting/#configuration-validation-errors","text":"","title":"Configuration Validation Errors"},{"location":"troubleshooting/#missing-mandatory-settings","text":"example missing client_id: oidc-server start --config example/wrong.yaml Key: 'OIDCServerConfig.ClientID' Error:Field validation for 'ClientID' failed on the 'required' tag {\"level\":\"error\",\"ts\":1647367972.9460135,\"caller\":\"cmd/start.go:76\",\"msg\":\"validating config\",\"error\":\"Validation Error\",\"stacktrace\":\"github.com/vdbulcke/oidc-server-demo/cmd.runServer\\n\\t/home/runner/work/oidc-server-demo/oidc-server-demo/cmd/start.go:76\\ngithub.com/spf13/cobra.(*Command).execute\\n\\t/home/runner/go/pkg/mod/github.com/spf13/cobra@v1.4.0/command.go:860\\ngithub.com/spf13/cobra.(*Command).ExecuteC\\n\\t/home/runner/go/pkg/mod/github.com/spf13/cobra@v1.4.0/command.go:974\\ngithub.com/spf13/cobra.(*Command).Execute\\n\\t/home/runner/go/pkg/mod/github.com/spf13/cobra@v1.4.0/command.go:902\\ngithub.com/vdbulcke/oidc-server-demo/cmd.Execute\\n\\t/home/runner/work/oidc-server-demo/oidc-server-demo/cmd/main.go:36\\nmain.main\\n\\t/home/runner/work/oidc-server-demo/oidc-server-demo/main.go:8\\nruntime.main\\n\\t/opt/hostedtoolcache/go/1.17.7/x64/src/runtime/proc.go:255\"}","title":"Missing Mandatory Settings"},{"location":"user_config/","text":"Mock User Configuration \u00b6 Default (Infinite) Mock User \u00b6 Note The Default Mock User is used if no other mock user is defined or when the Mock User Queue is empty. You configure the default mock user using the following settings in the main config.yaml : ## Mock User (Mandatory) ## mock_user : ## Sub (Mandatory) ### the user's subject sub : bob@acme.com ## ID Token Claims (mandatory) ### Arbitrary key/values claims to ### add in the id_token ### ### Empty set to '{}' id_token_claims : ## example adding amr values amr : - eid - urn:be:fedict:iam:fas:Level500 ## dummy claims foo : bar ## Access Token Claims (Optional) ### Arbitrary key/values claims to ### add in the access_token ### access_token_claims : amr : - eid - urn:be:fedict:iam:fas:Level500 foo : - hello : world - bar : baz ## Userinfo Claims (optional) ### Arbitrary key/values claims to ### add in the userinfo response ### ### Empty set to '{}' userinfo_claims : ## example fedid : \"73691e9e7beee3becdf78fc9394d28fe548fe249\" surname : Jane givenName : Doe Note Access Token Claims are introduced in release v0.4.0 , but are not mandatory for backward compatibility Multiple Mock Users \u00b6 Optionally if you need additional different mock users, you can configure the following property in the main config.yaml : ## ## Additional Mock Users ## since version v0.3.0 ### Users loaded in the UserQueue mock_user_folder : ./example/users The mock_user_folder property is a path to a directory containing the additional mock users definition (one per YAML file). Mock User Files \u00b6 Each files represents a mock user definition: ## Sub (Mandatory) ### the user's subject sub : john.doe@acme.com ## ID Token Claims (mandatory) ### Arbitrary key/values claims to ### add in the id_token ### ### Empty set to '{}' id_token_claims : ## example adding amr values amr : - eid - urn:be:fedict:iam:fas:Level500 ## dummy claims foo : bar ## Access Token Claims (Optional) ### Arbitrary key/values claims to ### add in the access_token ### access_token_claims : custom : claims ## Userinfo Claims (optional) ### Arbitrary key/values claims to ### add in the userinfo response ### ### Empty set to '{}' userinfo_claims : ## example fedid : \"F8nZR6mFFlvyGd85CE5Qu5iFD4qaAGivWHdW1evt\" surname : John givenName : Doe Mock User Queue \u00b6 The oidc-server will load the mock user definition files found in the mock_user_folder and put them in that order in the User Queue. For each new Authorize call, the oidc-server will Pop the first user from the Queue and use it for the id_token and userinfo response, until the queue is empty. In which case, it will continue returning the default mock user . For example, if we have the following files in mock_user_folder : 01-john_doe.yaml 02-babs_jensen.yaml And we make the following requests: Authorize request returns the profile of 01-john_doe.yaml Authorize request returns the profile of 02-babs_jensen.yaml Authorize request returns the profile of default mock user ( mock_user: in the main config.yaml ) Authorize request returns the profile of default mock user Authorize request returns the profile of default mock user ...","title":"Mock User Configuration"},{"location":"user_config/#mock-user-configuration","text":"","title":"Mock User Configuration"},{"location":"user_config/#default-infinite-mock-user","text":"Note The Default Mock User is used if no other mock user is defined or when the Mock User Queue is empty. You configure the default mock user using the following settings in the main config.yaml : ## Mock User (Mandatory) ## mock_user : ## Sub (Mandatory) ### the user's subject sub : bob@acme.com ## ID Token Claims (mandatory) ### Arbitrary key/values claims to ### add in the id_token ### ### Empty set to '{}' id_token_claims : ## example adding amr values amr : - eid - urn:be:fedict:iam:fas:Level500 ## dummy claims foo : bar ## Access Token Claims (Optional) ### Arbitrary key/values claims to ### add in the access_token ### access_token_claims : amr : - eid - urn:be:fedict:iam:fas:Level500 foo : - hello : world - bar : baz ## Userinfo Claims (optional) ### Arbitrary key/values claims to ### add in the userinfo response ### ### Empty set to '{}' userinfo_claims : ## example fedid : \"73691e9e7beee3becdf78fc9394d28fe548fe249\" surname : Jane givenName : Doe Note Access Token Claims are introduced in release v0.4.0 , but are not mandatory for backward compatibility","title":"Default (Infinite) Mock User"},{"location":"user_config/#multiple-mock-users","text":"Optionally if you need additional different mock users, you can configure the following property in the main config.yaml : ## ## Additional Mock Users ## since version v0.3.0 ### Users loaded in the UserQueue mock_user_folder : ./example/users The mock_user_folder property is a path to a directory containing the additional mock users definition (one per YAML file).","title":"Multiple Mock Users"},{"location":"user_config/#mock-user-files","text":"Each files represents a mock user definition: ## Sub (Mandatory) ### the user's subject sub : john.doe@acme.com ## ID Token Claims (mandatory) ### Arbitrary key/values claims to ### add in the id_token ### ### Empty set to '{}' id_token_claims : ## example adding amr values amr : - eid - urn:be:fedict:iam:fas:Level500 ## dummy claims foo : bar ## Access Token Claims (Optional) ### Arbitrary key/values claims to ### add in the access_token ### access_token_claims : custom : claims ## Userinfo Claims (optional) ### Arbitrary key/values claims to ### add in the userinfo response ### ### Empty set to '{}' userinfo_claims : ## example fedid : \"F8nZR6mFFlvyGd85CE5Qu5iFD4qaAGivWHdW1evt\" surname : John givenName : Doe","title":"Mock User Files"},{"location":"user_config/#mock-user-queue","text":"The oidc-server will load the mock user definition files found in the mock_user_folder and put them in that order in the User Queue. For each new Authorize call, the oidc-server will Pop the first user from the Queue and use it for the id_token and userinfo response, until the queue is empty. In which case, it will continue returning the default mock user . For example, if we have the following files in mock_user_folder : 01-john_doe.yaml 02-babs_jensen.yaml And we make the following requests: Authorize request returns the profile of 01-john_doe.yaml Authorize request returns the profile of 02-babs_jensen.yaml Authorize request returns the profile of default mock user ( mock_user: in the main config.yaml ) Authorize request returns the profile of default mock user Authorize request returns the profile of default mock user ...","title":"Mock User Queue"},{"location":"contributing/contributing/","text":"Contributing \u00b6 Look at CONTRIBUTING.md at the root of the Github repo .","title":"Contributing"},{"location":"contributing/contributing/#contributing","text":"Look at CONTRIBUTING.md at the root of the Github repo .","title":"Contributing"},{"location":"contributing/git/","text":"Git \u00b6 Commit Pattern \u00b6 Commit message template: <type>: <subject> <BLANK LINE> <body> <BLANK LINE> <footer> Use the following type for your commit messages: docs: for commit related to documentation change feat: for commit related to a new feature, also add a reference to the Github issue in the subject fix: for commit related to a bug fix, also add a reference to the Github issue in the subject Use the following type for commits that should not appear in changelog or release note uses: test: for test typo: for fixing typo ignore: for everything else Breaking Change or Note \u00b6 Mention BREAKING CHANGE: or NOTE: in the footer . Use rebase before submitting Pull Request \u00b6 Make sure to rebase you commits (on your feature branch) first so that the git log follows the patterns mentioned above. git rebase -i","title":"Git"},{"location":"contributing/git/#git","text":"","title":"Git"},{"location":"contributing/git/#commit-pattern","text":"Commit message template: <type>: <subject> <BLANK LINE> <body> <BLANK LINE> <footer> Use the following type for your commit messages: docs: for commit related to documentation change feat: for commit related to a new feature, also add a reference to the Github issue in the subject fix: for commit related to a bug fix, also add a reference to the Github issue in the subject Use the following type for commits that should not appear in changelog or release note uses: test: for test typo: for fixing typo ignore: for everything else","title":"Commit Pattern"},{"location":"contributing/git/#breaking-change-or-note","text":"Mention BREAKING CHANGE: or NOTE: in the footer .","title":"Breaking Change or Note"},{"location":"contributing/git/#use-rebase-before-submitting-pull-request","text":"Make sure to rebase you commits (on your feature branch) first so that the git log follows the patterns mentioned above. git rebase -i","title":"Use rebase before submitting Pull Request"},{"location":"contributing/tooling/","text":"Tooling \u00b6 Release: goreleaser \u00b6 Goreleaser is used for building, packaging, and releasing new version of the software. Info See section \"Git\" for more details about git commit message Making Local Snapshot Build \u00b6 make build-snapshot Or goreleaser build --rm-dist --snapshot --single-target Testing Pre-release \u00b6 make release-skip-publish Or goreleaser release --rm-dist --skip-publish Vulnerability Scanning \u00b6 nancy is used for dependency scanning. make scan Linting \u00b6 golangci-lint is used for code linting. make lint Changelog Generator \u00b6 git-chglog is used for Changelog generation make changelog Info See section \"Git\" for more details about git commit message Documentation \u00b6 MkDocs is used for generating the documentation.","title":"Tooling"},{"location":"contributing/tooling/#tooling","text":"","title":"Tooling"},{"location":"contributing/tooling/#release-goreleaser","text":"Goreleaser is used for building, packaging, and releasing new version of the software. Info See section \"Git\" for more details about git commit message","title":"Release: goreleaser"},{"location":"contributing/tooling/#making-local-snapshot-build","text":"make build-snapshot Or goreleaser build --rm-dist --snapshot --single-target","title":"Making Local Snapshot Build"},{"location":"contributing/tooling/#testing-pre-release","text":"make release-skip-publish Or goreleaser release --rm-dist --skip-publish","title":"Testing Pre-release"},{"location":"contributing/tooling/#vulnerability-scanning","text":"nancy is used for dependency scanning. make scan","title":"Vulnerability Scanning"},{"location":"contributing/tooling/#linting","text":"golangci-lint is used for code linting. make lint","title":"Linting"},{"location":"contributing/tooling/#changelog-generator","text":"git-chglog is used for Changelog generation make changelog Info See section \"Git\" for more details about git commit message","title":"Changelog Generator"},{"location":"contributing/tooling/#documentation","text":"MkDocs is used for generating the documentation.","title":"Documentation"}]}